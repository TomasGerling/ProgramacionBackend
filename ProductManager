class ProductManager {
    constructor() {
      this.products = [];
      this.lastId = 0;
    }
  
    addProduct(product) {
      // Verificar que el código del producto no se repita
      const existingProduct = this.products.find(p => p.code === product.code);
      if (existingProduct) {
        throw new Error(`El código ${product.code} ya está en uso.`);
      }
  
      // Verificar que todos los campos sean obligatorios
      const requiredFields = ['title', 'description', 'price', 'thumbnail', 'code', 'stock'];
      const hasAllFields = requiredFields.every(field => product[field]);
      if (!hasAllFields) {
        throw new Error('Todos los campos son obligatorios.');
      }
  
      // Crear el producto y agregarlo al arreglo
      const newProduct = {
        id: ++this.lastId,
        ...product
      };
      this.products.push(newProduct);
  
      return newProduct;
    }
  
    getProducts() {
      return this.products;
    }
  
    getProductById(id) {
      const product = this.products.find(p => p.id === id);
      if (!product) {
        console.error('Producto no encontrado.');
      }
      return product;
    }
  }
  
  // Crear una instancia de la clase ProductManager
  const pm = new ProductManager();
  
  // Pruebas
  console.log('Productos al inicio:', pm.getProducts()); // []
  
  pm.addProduct({
    title: 'producto prueba',
    description: 'Este es un producto prueba',
    price: 200,
    thumbnail: 'Sin imagen',
    code: 'abc123',
    stock: 25
  });
  console.log('Productos después de agregar uno:', pm.getProducts());
  
  try {
    pm.addProduct({
      title: 'producto repetido',
      description: 'Este producto tiene el mismo código que el anterior',
      price: 300,
      thumbnail: 'Otra imagen',
      code: 'abc123',
      stock: 10
    });
  } catch (error) {
    console.error(error.message);
  }
  
  console.log('Producto con id 1:', pm.getProductById(1));
  console.log('Producto con id 2:', pm.getProductById(2)); // Debe arrojar un error
  
